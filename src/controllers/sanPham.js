import db from "../config/db.js";
import sanPham_Service from "../service/sanPham_Service.js";
import check from "../service/utils/KhoCheck.js";
import dotenv from "dotenv";
dotenv.config();
const addSan_PhamController = async (req, res) => {
  try {
    const shop_id = req.user.shop_id;
    console.log(">>::", shop_id);

    const {
      ten_sanpham,
      gia_ban,
      mo_ta,
      kho_id,
      so_luong_ton,
      loai_sanpham,

      nha_cung_cap,
    } = req.body;

    // X·ª≠ l√Ω file upload
    const url_sanpham = req.file ? `/${req.file.filename}` : "";

    // Ki·ªÉm tra b·∫Øt bu·ªôc file ·∫£nh
    if (!req.file) {
      return res.status(400).json({
        status: "fail",
        message: "Kh√¥ng c√≥ file ƒë∆∞·ª£c g·ª≠i!",
      });
    }

    // Ki·ªÉm tra th√¥ng tin b·∫Øt bu·ªôc
    if (!ten_sanpham || !gia_ban || !mo_ta || !loai_sanpham || !nha_cung_cap) {
      return res.status(400).json({
        status: "fail",
        message: "Th√™m s·∫£n ph·∫©m th·∫•t b·∫°i, thi·∫øu th√¥ng tin",
      });
    }

    // Ki·ªÉm tra kho t·ªìn t·∫°i
    const is_Kho = await check.check_kho(kho_id);
    if (!is_Kho) {
      return res.status(400).json({
        status: "fail",
        message: "Kho kh√¥ng t·ªìn t·∫°i",
      });
    }

    // G·ªçi service th√™m s·∫£n ph·∫©m
    const result = await sanPham_Service.addSan_Pham_Srvice(
      ten_sanpham,
      gia_ban,
      mo_ta,
      kho_id,
      so_luong_ton,
      url_sanpham,
      loai_sanpham,
      shop_id,
      nha_cung_cap
    );

    // Tr·∫£ v·ªÅ k·∫øt qu·∫£ th√†nh c√¥ng
    return res.status(200).json({
      status: "success",
      message: "Th√™m s·∫£n ph·∫©m th√†nh c√¥ng",
      data: result,
    });
  } catch (err) {
    console.error("‚ùå L·ªói addSan_PhamController:", err);
    return res.status(500).json({
      status: "fail",
      message: "Th√™m s·∫£n ph·∫©m th·∫•t b·∫°i, l·ªói server",
    });
  }
};

const delete_San_PhamController = async (req, res) => {
  const { sanpham_id } = req.params;
  const shop_id = req.user.shop_id;

  console.log("...", sanpham_id, req.user);

  if (!sanpham_id)
    return res.status(401).json({
      status: "fail",
      message: " thi·∫øu id s·∫£n ph·∫©m",
    });
  const is_sp = await check.check_SP(sanpham_id, shop_id);
  if (!is_sp)
    return res.status(401).json({
      status: "fail",
      message: "s·∫£n ph·∫©m ko t·ªìn t·∫°i",
    });
  try {
    const [res1] = await db
      .promise()
      .query("DELETE FROM kho_sanpham WHERE sanpham_id = ?", [sanpham_id]);
    console.log("Deleted rows in kho_sanpham:", res1.affectedRows);

    const [res2] = await db
      .promise()
      .query("DELETE FROM sanpham WHERE sanpham_id = ? AND shop_id = ?", [
        sanpham_id,
        shop_id,
      ]);
    console.log("Deleted rows in sanpham:", res2.affectedRows);

    return res.status(200).json({
      status: "success",
      message: `x√≥a s·∫£n ph·∫©m th√†nh c√¥ng id ${sanpham_id}`,
    });
  } catch (err) {
    console.error("L·ªói database:", err); // log server
    return res.status(500).json({
      status: "error",
      message: "X√≥a s·∫£n ph·∫©m th·∫•t b·∫°i",
    });
  }
};
const base_url = process.env.URL_IMAGE || "";

// üì¶ Xem danh s√°ch s·∫£n ph·∫©m theo shop ƒëang ƒëƒÉng nh·∫≠p
const xem_SanPham_Controller = async (req, res) => {
  try {
    const shop_id = req.user?.shop_id; // shop_id l·∫•y t·ª´ token ng∆∞·ªùi d√πng
    if (!shop_id) {
      return res.status(400).json({
        status: "fail",
        message: "Kh√¥ng x√°c ƒë·ªãnh ƒë∆∞·ª£c shop_id c·ªßa ng∆∞·ªùi d√πng",
      });
    }

    const sql = `
      SELECT 
        s.sanpham_id,
        s.ten_sanpham,
        s.gia_ban,
        s.mo_ta,
        CONCAT(?, s.url_sanpham) AS url_sanpham,
        s.loai_sanpham,
        s.giam_gia_SP,
        s.shop_id,
        sh.ten_shop,
        sh.dia_chi_shop,
        CONCAT(?, sh.url_shop) AS url_shop
      FROM sanpham AS s
      JOIN shop AS sh ON s.shop_id = sh.shop_id
      WHERE s.shop_id = ?
      ORDER BY s.sanpham_id DESC;
    `;

    const [rows] = await db
      .promise()
      .execute(sql, [base_url, base_url, shop_id]);

    return res.status(200).json({
      status: "success",
      data: rows,
    });
  } catch (error) {
    console.error("L·ªói database:", error);
    return res.status(500).json({
      status: "error",
      message: "Kh√¥ng th·ªÉ l·∫•y danh s√°ch s·∫£n ph·∫©m c·ªßa shop",
    });
  }
};

const sua_SanPham_Controller = async (req, res) => {
  const { sanpham_id } = req.params;
  const shop_id = req.user.shop_id;

  const { ten_sanpham ="", gia_ban ="", mo_ta ="", loai_sanpham ="", giam_gia_SP="" } = req.body;

  const url_sanpham = req.file ? `/${req.file.filename}` : undefined;

  try {
    // Ki·ªÉm tra s·∫£n ph·∫©m t·ªìn t·∫°i
    const [exist] = await db
      .promise()
      .query(`SELECT * FROM sanpham WHERE sanpham_id = ? AND shop_id = ?`, [
        sanpham_id,
        shop_id,
      ]);

    if (exist.length === 0) {
      return res.status(404).json({
        status: "fail",
        message: "S·∫£n ph·∫©m kh√¥ng t·ªìn t·∫°i ho·∫∑c kh√¥ng thu·ªôc c·ª≠a h√†ng n√†y",
      });
    }

    const current = exist[0];

    // ‚úÖ Ch·ªâ c·∫≠p nh·∫≠t n·∫øu gi√° tr·ªã h·ª£p l·ªá, tr√°nh l·ªói ki·ªÉu d·ªØ li·ªáu
    const updatedData = {
      ten_sanpham:
        ten_sanpham && ten_sanpham.trim() !== ""
          ? ten_sanpham
          : current.ten_sanpham,
      gia_ban:
        gia_ban !== undefined && gia_ban !== null && gia_ban !== ""
          ? Number(gia_ban)
          : current.gia_ban,
      mo_ta: mo_ta && mo_ta.trim() !== "" ? mo_ta : current.mo_ta,
      url_sanpham:
        url_sanpham && url_sanpham.trim() !== ""
          ? url_sanpham
          : current.url_sanpham,
      loai_sanpham:
        loai_sanpham && loai_sanpham.trim() !== ""
          ? loai_sanpham
          : current.loai_sanpham,
      giam_gia_SP:
        giam_gia_SP !== undefined && giam_gia_SP !== null && giam_gia_SP !== ""
          ? Number(giam_gia_SP)
          : current.giam_gia_SP,
    };

    // C·∫≠p nh·∫≠t s·∫£n ph·∫©m
    const [result] = await db.promise().query(
      `
      UPDATE sanpham 
      SET 
        ten_sanpham = ?, 
        gia_ban = ?, 
        mo_ta = ?, 
        url_sanpham = ?, 
        loai_sanpham = ?, 
        giam_gia_SP = ?
      WHERE sanpham_id = ? AND shop_id = ?
      `,
      [
        updatedData.ten_sanpham,
        updatedData.gia_ban,
        updatedData.mo_ta,
        updatedData.url_sanpham,
        updatedData.loai_sanpham,
        updatedData.giam_gia_SP,
        sanpham_id,
        shop_id,
      ]
    );

    if (result.affectedRows === 0) {
      return res.status(400).json({
        status: "fail",
        message: "Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t s·∫£n ph·∫©m",
      });
    }

    // L·∫•y l·∫°i d·ªØ li·ªáu m·ªõi nh·∫•t
    const [updated] = await db.promise().query(
      `
      SELECT sanpham_id, ten_sanpham, gia_ban, mo_ta, 
        CONCAT(?, url_sanpham) AS url_sanpham, 
        loai_sanpham, giam_gia_SP, shop_id
      FROM sanpham WHERE sanpham_id = ?
      `,
      [base_url, sanpham_id]
    );

    return res.status(200).json({
      status: "success",
      message: "C·∫≠p nh·∫≠t s·∫£n ph·∫©m th√†nh c√¥ng",
      data: updated[0],
    });
  } catch (error) {
    console.error("‚ùå L·ªói khi s·ª≠a s·∫£n ph·∫©m:", error);
    return res.status(500).json({
      status: "error",
      message: "L·ªói server khi s·ª≠a s·∫£n ph·∫©m",
    });
  }
};

// Xu·∫•t
const sanPham_controllers = {
  addSan_PhamController,
  delete_San_PhamController,
  xem_SanPham_Controller,
  sua_SanPham_Controller,
};
export default sanPham_controllers;
