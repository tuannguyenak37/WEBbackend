import jwt from "jsonwebtoken";

const authMiddleware = (req, res, next) => {
  try {
    const accessToken = req.cookies?.access_Token;
    const refreshToken = req.cookies?.refreshToken;

    // ‚úÖ N·∫øu kh√¥ng c√≥ accessToken, nh∆∞ng c√≥ refreshToken -> c·∫•p m·ªõi
    if (!accessToken && refreshToken) {
      return refreshAccessToken(refreshToken, req, res, next);
    }

    if (!accessToken) {
      return res.status(401).json({ message: "No access token üòí" });
    }

    jwt.verify(accessToken, process.env.JWT_SECRET, (err, decoded) => {
      if (!err) {
        req.user = decoded;
        return next();
      }

      // ‚úÖ Access token h·∫øt h·∫°n ‚Üí th·ª≠ refresh
      if (err.name === "TokenExpiredError" && refreshToken) {
        return refreshAccessToken(refreshToken, req, res, next);
      }

      return res
        .status(403)
        .json({ message: "Token kh√¥ng h·ª£p l·ªá ho·∫∑c h·∫øt h·∫°n" });
    });
  } catch (error) {
    console.error("‚ùå L·ªói authMiddleware:", error);
    return res.status(500).json({ message: "Internal server error" });
  }
};

// üîÅ H√†m c·∫•p l·∫°i access token m·ªõi
function refreshAccessToken(refreshToken, req, res, next) {
  jwt.verify(refreshToken, process.env.JWT_SECRET, (err, user) => {
    if (err) {
      return res
        .status(403)
        .json({ message: "Refresh token kh√¥ng h·ª£p l·ªá ho·∫∑c h·∫øt h·∫°n" });
    }
    console.log("token resh c≈© ", refreshAccessToken);
    // ‚úÖ T·∫°o access token m·ªõi
    const newAccessToken = jwt.sign(
      {
        user_id: user.user_id, // ‚úÖ ƒë√∫ng key
        user_name: user.user_name, // ‚úÖ ƒë√∫ng key
        role: user.role,
        shop_id: user.shop_id || null,
      },
      process.env.JWT_SECRET,
      { expiresIn: process.env.JWT_EXPIRE }
    );

    // ‚úÖ G·ª≠i l·∫°i cookie access token m·ªõi
    res.cookie("access_Token", newAccessToken, {
      httpOnly: true,
      secure: false, // ƒë·ªïi true n·∫øu d√πng HTTPS
      sameSite: "strict",
      maxAge: 15 * 60 * 1000,
    });

    console.log("‚úÖ Refresh access token m·ªõi:", newAccessToken);

    // ‚úÖ Gi·∫£i m√£ token m·ªõi ngay t·∫°i ƒë√¢y ƒë·ªÉ d√πng trong request hi·ªán t·∫°i
    jwt.verify(newAccessToken, process.env.JWT_SECRET, (err, decoded) => {
      if (err) {
        console.error("‚ö†Ô∏è L·ªói verify token m·ªõi:", err.message);
        return res.status(403).json({ message: "L·ªói x√°c th·ª±c token m·ªõi" });
      }

      req.user = decoded; // G·∫Øn th√¥ng tin user m·ªõi
      console.log(" user tokend ƒëc c·∫•p l·∫°i", req.user);
      next(); // ‚úÖ Controller sau ƒë√≥ s·∫Ω c√≥ req.user h·ª£p l·ªá
    });
  });
}

export default authMiddleware;
