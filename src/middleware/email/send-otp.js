import dotenv from "dotenv";
dotenv.config();
import crypto from "crypto";
import bcrypt from "bcryptjs";
import db from "../../config/db.js";
import nodemailer from "nodemailer";
import redisClient from "../../config/redis.js";

const OTP_EXPIRE = parseInt(process.env.OTP_EXPIRE_SECONDS || "300"); // 5 ph√∫t

// ‚öôÔ∏è Kh·ªüi t·∫°o transporter Gmail
const transporter = nodemailer.createTransport({
  host: process.env.SMTP_HOST,
  port: parseInt(process.env.SMTP_PORT),
  secure: true, // true n·∫øu d√πng c·ªïng 465
  auth: {
    user: process.env.SMTP_USER,
    pass: process.env.SMTP_PASS,
  },
});

// üî¢ H√†m t·∫°o OTP ng·∫´u nhi√™n 6 ch·ªØ s·ªë
function generateOtp(length = 6) {
  return crypto
    .randomInt(0, 10 ** length)
    .toString()
    .padStart(length, "0");
}

// üì© Middleware g·ª≠i OTP qua email
const sendOtpMiddleware = async (req, res) => {
  try {
    const user_id = req.user?.user_id; // tr√°nh l·ªói n·∫øu req.user kh√¥ng c√≥
    if (!user_id) {
      return res.status(400).json({ message: "Thi·∫øu user_id trong request" });
    }

    const [[emaildb]] = await db
      .promise()
      .execute(`SELECT email FROM users WHERE user_id = ?`, [user_id]);

    const email = emaildb?.email;
    if (!email) {
      return res
        .status(400)
        .json({ message: "Kh√¥ng t√¨m th·∫•y email c·ªßa ng∆∞·ªùi d√πng" });
    }

    const otp = generateOtp(6);
    const otpHash = await bcrypt.hash(otp, 10);

    // üîí L∆∞u OTP v√†o Redis v·ªõi key: otp:<email>
    await redisClient.setEx(`otp:${email}`, OTP_EXPIRE, otpHash);

    // ‚úâÔ∏è G·ª≠i email
    await transporter.sendMail({
      from: `"H·ªá th·ªëng x√°c th·ª±c" <${process.env.SMTP_USER}>`,
      to: email,
      subject: "üîê M√£ OTP x√°c nh·∫≠n c·ªßa b·∫°n",
      html: `
  <div style="font-family: 'Segoe UI', Roboto, sans-serif; background-color: #f5f6fa; padding: 40px 0;">
    <div style="max-width: 480px; margin: 0 auto; background: #ffffff; border-radius: 12px; box-shadow: 0 4px 12px rgba(0,0,0,0.08); overflow: hidden;">
      <div style="background: linear-gradient(135deg, #007BFF, #00C6FF); padding: 20px; text-align: center; color: white;">
        <h2 style="margin: 0; font-size: 20px;">X√°c th·ª±c MALIKETH</h2>
      </div>
      <div style="padding: 30px; text-align: center;">
        <p style="font-size: 15px; color: #333;">Xin ch√†o,</p>
        <p style="font-size: 15px; color: #333;">C·∫£m ∆°n b·∫°n ƒë√£ s·ª≠ d·ª•ng d·ªãch v·ª• c·ªßa ch√∫ng t√¥i.</p>
        <p style="font-size: 15px; color: #333;">M√£ OTP ƒë·ªÉ x√°c th·ª±c c·ªßa b·∫°n l√†:</p>
        <div style="font-size: 30px; font-weight: bold; color: #007BFF; letter-spacing: 5px; margin: 20px 0;">
          ${otp}
        </div>
        <p style="font-size: 14px; color: #555;">M√£ n√†y c√≥ hi·ªáu l·ª±c trong <strong>${
          OTP_EXPIRE / 60
        } ph√∫t</strong>.</p>
        <p style="font-size: 13px; color: #999;">N·∫øu b·∫°n kh√¥ng y√™u c·∫ßu m√£ n√†y, vui l√≤ng b·ªè qua email.</p>
      </div>
      <div style="background-color: #f1f2f6; padding: 10px 0; text-align: center; color: #888; font-size: 12px;">
        ¬© ${new Date().getFullYear()} H·ªá th·ªëng x√°c th·ª±c. M·ªçi quy·ªÅn ƒë∆∞·ª£c b·∫£o l∆∞u.
      </div>
    </div>
  </div>
  `,
    });

    console.log(`‚úÖ OTP g·ª≠i t·ªõi ${email}: ${otp}`); // ch·ªâ d√πng khi debug

    // Ti·∫øp t·ª•c ƒë·∫øn handler ti·∫øp theo
    return res
      .status(200)
      .json({ ok: true, message: "OTP ƒë√£ ƒë∆∞·ª£c g·ª≠i qua email!" });
  } catch (err) {
    console.error("‚ùå L·ªói g·ª≠i OTP:", err);
    return res.status(500).json({ ok: false, message: "G·ª≠i OTP th·∫•t b·∫°i" });
  }
};

export default sendOtpMiddleware;
