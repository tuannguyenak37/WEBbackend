import dotenv from "dotenv";
dotenv.config();

import bcrypt from "bcryptjs";
import db from "../../config/db.js";

import redisClient from "../../config/redis.js";

const verifyOtpMiddleware = async (req, res) => {
  try {
    const user_id = req.user?.user_id; // n·∫øu b·∫°n d√πng middleware auth
    const { otp } = req.body;
    if (!user_id || !otp) {
      return res.status(400).json({ message: "Thi·∫øu th√¥ng tin x√°c th·ª±c" });
    }
    // L·∫•y email t·ª´ DB
    const [[emaildb]] = await db
      .promise()
      .execute(`SELECT email FROM users WHERE user_id = ?`, [user_id]);

    const email = emaildb?.email;
    if (!email) {
      return res
        .status(400)
        .json({ message: "Kh√¥ng t√¨m th·∫•y email ng∆∞·ªùi d√πng" });
    }
    // l·∫•y opt
    const optKey = `otp:${email}`;
    const storedOtpHash = await redisClient.get(optKey);
    console.log("üß† OTP ng∆∞·ªùi nh·∫≠p:", otp);
    console.log("üìß Email:", email);
    console.log("üîë Redis key:", optKey);
    console.log("üíæ storedOtpHash:", storedOtpHash);

    if (!storedOtpHash) {
      return res
        .status(400)
        .json({ message: "M√£ OTP ƒë√£ h·∫øt h·∫°n ho·∫∑c kh√¥ng t·ªìn t·∫°i" });
    }
    const isOtpValid = await bcrypt.compare(otp.toString(), storedOtpHash);

    if (!isOtpValid) {
      return res.status(400).json({ message: "M√£ OTP kh√¥ng h·ª£p l·ªá" });
    }
    // ‚úÖ X√°c th·ª±c th√†nh c√¥ng
    await redisClient.del(optKey); // xo√° OTP sau khi x√°c th·ª±c
    return res
      .status(200)
      .json({ ok: true, message: "X√°c th·ª±c OTP th√†nh c√¥ng!" });
  } catch (error) {
    console.error("L·ªói x√°c th·ª±c OTP:", error);
    res.status(500).json({ message: "L·ªói m√°y ch·ªß" });
  }
};

export default verifyOtpMiddleware;
